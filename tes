<template>
    <lightning-card title="Asset Details" style="padding: 20px;">
        <!-- Form Section -->
        <div style="margin-bottom: 20px;">
            <lightning-button label="Scan Code" onclick={handleScan} style="margin-left: 15px;"></lightning-button>
            <lightning-input label="Enter Item Code" value={itemCode} onchange={handleInputChange} disabled={isItemCodeDisabled} style="margin-left: 15px;"></lightning-input>
            <lightning-input type="file" label="Upload Invoice" onchange={handleFileUpload} style="margin-left: 15px;"></lightning-input>
            <lightning-button label="Submit" onclick={handleCallout} style="margin-top: 20px; margin-left: 15px;"></lightning-button>
            <lightning-button label="Transfer the Asset" onclick={handleTransferClick} if:true={isSerialIdLinkedResult} style="margin-top: 20px; margin-left: 15px;"></lightning-button>
        </div>
        <!-- QR Code Response Details -->
        <template if:true={qrCodeResponse}>
            <div style="margin-top: 20px;">
                <lightning-formatted-text value={qrCodeResponse.ResponseMessage} style="margin-left: 15px;"></lightning-formatted-text>
                <lightning-formatted-text value={qrCodeResponse.Status} style="margin-left: 15px;"></lightning-formatted-text>
                <!-- Add more fields as needed -->
            </div>
        </template>
    </lightning-card>
</template>








import { LightningElement, track, api } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import makeMockApiCall from '@salesforce/apex/AssetOnboardingController.makeMockApiCall';
import isSerialIdLinked from '@salesforce/apex/AssetOnboardingController.isSerialIdLinked';
import uploadFile from '@salesforce/apex/AssetOnboardingController.saveAttachment';
import transferAsset from '@salesforce/apex/AssetOnboardingController.transfertAnAsset';
import { getBarcodeScanner } from 'lightning/mobileCapabilities';

export default class AssetOnboarding extends LightningElement {
    @track itemCode;
    assetId = '02iC40000003xrZIAQ';
    barcodeScanner;
    @api recordId;
    @track files = [];
    @track isSerialIdLinkedResult = false;
    @track isItemCodeDisabled = false;
    @track previousAssetId;
    @track previousAccount;
    @track qrCodeResponse;

    connectedCallback() {
        this.barcodeScanner = getBarcodeScanner();
    }

    handleInputChange(event) {
        this.itemCode = event.target.value;
    }

    handleFileUpload(event) {
        const file = event.target.files[0];
        const reader = new FileReader();
        
        reader.onload = () => {
            this.fileData = {
                fileName: file.name,
                base64Data: reader.result.split(',')[1]
            };
            this.handleSaveDocument(); 
        };

        reader.readAsDataURL(file);
    }
    
    handleSaveDocument() {
        if (!this.fileData) {
            return;
        }
        uploadFile({ parentId: this.recordId, fileName: this.fileData.fileName, base64Data: this.fileData.base64Data })
            .then(result => {
                this.showSuccessToast('Document uploaded successfully');
                console.log('Document saved successfully:', result);
            })
            .catch(error => {
                this.showToast('Error', error.body.message, 'error');
            });
    }

    showSuccessToast(message) {
        const event = new ShowToastEvent({
            title: 'Success',
            message: message,
            variant: 'success',
        });
        this.dispatchEvent(event);
    }

    handleScan() {
        if (this.barcodeScanner.isAvailable()) {
            let scanningOptions = {
                barcodeTypes: ["code128","code39", "code93", "ean13", "ean8", "upca", "upce", "qr", "datamatrix", "itf", "pdf417"], 
                instructionText:"Position barcode in the scanner view.\nPress x to stop.",
                successText:"Successful Scan!"
            };
            this.barcodeScanner.scan(scanningOptions)
                .then((results) => {
                    this.itemCode = results.value;
                    this.isItemCodeDisabled = true;
                })
                .catch((error) => {
                    this.showToast('Error', error.body.message, 'error');
                })
                .finally(() => {
                    this.barcodeScanner.dismiss();
                });
        } else {
            this.showToast('Error', 'Barcode scanner is not available', 'error');
        }
    }

    handleCallout() {
        if (!this.itemCode) {
            this.showToast('Warning', 'Please enter a value in the input field.', 'warning');
            return;
        }

        isSerialIdLinked({ serialId: this.itemCode })
            .then(result => {
                this.isSerialIdLinkedResult = result.isLinked;
                this.previousAssetId = result.recordId;
                this.previousAccount = result.AccountId;
                if (result.isLinked) {
                    this.showToast('Warning', 'The scanned serial ID is already linked with an existing asset.', 'warning');
                } else {
                    this.makeCallout();
                }
            })
            .catch(error => {
                this.showToast('Error', error.body.message, 'error');
            });
    }

    handleTransferClick() {
        transferAsset({ recordID: this.recordId, previousAssetId: this.previousAssetId, accountId: this.previousAccount }).then(result => {
            this.showToast('Success', result, 'success');
        }).catch(error => {
            this.showToast('Error', error.body.message, 'error');
        });
    }

    makeCallout() {
        makeMockApiCall({ qrCodes: [this.itemCode], recordId: this.recordId })
            .then(result => {
                this.qrCodeResponse = result.LstProductDetailsApiList[0]; // Assuming only one response
                if (this.qrCodeResponse.Status === 'INVALID') {
                    this.showToast('Error', this.qrCodeResponse.ResponseMessage, 'error');
                } else {
                    this.showToast('Success', 'QR Code processed successfully', 'success');
                }
            })
            .catch(error => {
                this.showToast('Error', error.body.message, 'error');
            });
    }

    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        });
        this.dispatchEvent(event);
    }
}




public class AssetOnboardingController {
    
    @AuraEnabled(cacheable =true)
    public static QRCodeResponse makeMockApiCall(List<String> qrCodes, String recordId) {
        return QRCodeService.sendQRCode(qrCodes);
    }
    
    @AuraEnabled(cacheable=true)
    public static Map<String, Object> isSerialIdLinked(String serialId) {
        Map<String, Object> result = new Map<String, Object>();
        result.put('isLinked', false);
        result.put('recordId', null);
        
        if (String.isBlank(serialId)) {
            return result; // Return false and null if serialId is null or empty
        }
        
        List<Asset> linkedAssets = [SELECT Id, AccountId FROM Asset WHERE SerialNumber = :serialId LIMIT 1];
        
        if (!linkedAssets.isEmpty()) {
            result.put('isLinked', true);
            result.put('recordId', linkedAssets[0].Id);
            result.put('previousAccount', linkedAssets[0].AccountId);
        }
        
        return result;
    }
    
    @AuraEnabled(cacheable=false)
    public static void saveAttachment(Id parentId, String fileName, String base64Data) {
        try {
            List<WorkOrderLineItem> woliList = [SELECT AssetId FROM WORKORDERLINEITEM WHERE Id =:parentId];
            Blob fileBlob = EncodingUtil.base64Decode(base64Data);
            List<ContentVersion> contentVersions = new List<ContentVersion>();            
            ContentVersion cv = new ContentVersion(
                Title = fileName,
                PathOnClient = fileName,
                VersionData = EncodingUtil.base64Decode(base64Data),
                FirstPublishLocationId = woliList[0].AssetId
            );
            contentVersions.add(cv);
            insert contentVersions;
            
        } catch (Exception ex) {
            throw new AuraHandledException('Error occurred while saving attachment: ' + ex.getMessage());
        }  
    }
    
    @AuraEnabled(cacheable=false)
    public static void transfertAnAsset(Id recordID, Id previousAssetId, Id accountId){
        List<WorkOrderLineItem> woliRecords = [SELECT CreatedById, AssetId, Asset.AccountId FROM WorkOrderLineItem WHERE Id = :recordID];
        if (woliRecords[0].AssetId != null) {
            Id appliancesRecordTypeId = Schema.SObjectType.Task.getRecordTypeInfosByName().get('Appliances').getRecordTypeId();
            List<Task> tasksToInsert = new List<Task>();
            Task taskRecord = new Task();
            taskRecord.Task_Type__c = 'Call';
            taskRecord.status = 'Requested for Transfer of Asset';
            taskRecord.Subject = 'Call';
            taskRecord.Customer_Name__c = woliRecords[0].Asset.AccountId;
            taskRecord.WhatId = woliRecords[0].AssetId;
            taskRecord.OwnerId = woliRecords[0].CreatedById;
            taskRecord.Previous_Asset__c = previousAssetId;
            taskRecord.ActivityDate = Date.today();
            taskRecord.RecordTypeId = appliancesRecordTypeId;
            tasksToInsert.add(taskRecord);
            
            if (!tasksToInsert.isEmpty()) {
                Insert tasksToInsert;
            }
            
            CustomNotificationType notificationType = [
                SELECT Id, DeveloperName
                FROM CustomNotificationType
                WHERE DeveloperName = 'Cancelled_SA_Notification_to_ASP' LIMIT 1
            ];
            
            Messaging.CustomNotification notification = new Messaging.CustomNotification();
            
            notification.setTitle('Task Assigned to You');
            notification.setBody('A new task has been assigned to you. Please review it.');
            notification.setTargetId(tasksToInsert[0].Id); 
            notification.setNotificationTypeId(notificationType.Id);
            
            Set<String> targetIds = new Set<String>();
            targetIds.add(woliRecords[0].CreatedById); 
            
            try {
                notification.send(targetIds);
            }
            catch (Exception e) {
                System.debug('Problem sending notification: ' + e.getMessage());
            }
            
            List<Id> contentDocumentIdList = new List<Id>();
            for (ContentDocumentLink cont : [SELECT LinkedEntityId, ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId = :woliRecords[0].AssetId]) {    
                contentDocumentIdList.add(cont.ContentDocumentId);
            }
            
            List<ContentVersion> contentVersionList = new List<ContentVersion>();
            for (ContentVersion contentVersionObj : [SELECT Title, PathOnClient, VersionData, ContentDocumentId FROM ContentVersion WHERE ContentDocumentId = :contentDocumentIdList]){
                ContentVersion cv = new ContentVersion(
                    Title = contentVersionObj.Title,
                    PathOnClient = contentVersionObj.PathOnClient,
                    VersionData = contentVersionObj.VersionData,
                    FirstPublishLocationId = previousAssetId
                );
                contentVersionList.add(cv);
            }
            
            try {
                Insert contentVersionList;
            }
            catch (Exception exc) {
                System.debug('Error-->' + exc);
            }
        }
    }
}
