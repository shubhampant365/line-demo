<template>
    <lightning-card title="Asset Details" style="padding: 20px;">
        <!-- Record Details Section -->
        <div style="margin-bottom: 20px;">
            <lightning-record-view-form
                record-id={assetId}
                object-api-name="Asset">
                <lightning-output-field field-name="Product_Name__c" style="margin-left: 15px;"></lightning-output-field>
                <lightning-output-field field-name="ProductCode" style="margin-left: 15px;"></lightning-output-field>
                <lightning-output-field field-name="Product_Category__c" style="margin-left: 15px;"></lightning-output-field>
                <lightning-output-field field-name="Product_Sub_Category__c" style="margin-left: 15px;"></lightning-output-field>
                <lightning-output-field field-name="Asset_Category__c" style="margin-left: 15px;"></lightning-output-field>
            </lightning-record-view-form>
        </div>
        <!-- Form Section -->
        <div style="margin-bottom: 20px;">
            <lightning-button label="Scan Code" onclick={handleScan} style="margin-left: 15px;"></lightning-button>
            <lightning-input label="Enter Item Code" value={itemCode} onchange={handleInputChange} disabled={isItemCodeDisabled} style="margin-left: 15px;"></lightning-input>
            <lightning-input type="file" label="Upload Invoice" onchange={handleFileUpload} style="margin-left: 15px;"></lightning-input>
            <lightning-button label="Submit" onclick={handleCallout} style="margin-top: 20px; margin-left: 15px;"></lightning-button>
            <lightning-button label="Transfer the Asset" onclick={handleTransferClick} if:true={isSerialIdLinkedResult} style="margin-top: 20px; margin-left: 15px;"></lightning-button>
        </div>
    </lightning-card>
</template>



import { LightningElement, track, api } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import makeMockApiCall from '@salesforce/apex/AssetOnboardingController.makeMockApiCall';
import isSerialIdLinked from '@salesforce/apex/AssetOnboardingController.isSerialIdLinked';
import uploadFile from '@salesforce/apex/AssetOnboardingController.saveAttachment';
import transferAsset from '@salesforce/apex/AssetOnboardingController.transfertAnAsset';
import { getBarcodeScanner } from 'lightning/mobileCapabilities';

export default class AssetOnboarding extends LightningElement {
    @track itemCode;
    assetId = '02iC40000003xrZIAQ';
    barcodeScanner;
    @api recordId;
    @track isSerialIdLinkedResult = false;
    @track isItemCodeDisabled = false;
    @track previousAssetId;
    @track previousAccount;

    connectedCallback() {
        this.barcodeScanner = getBarcodeScanner();
    }

    handleInputChange(event) {
        this.itemCode = event.target.value;
    }

    handleFileUpload(event) {
        const file = event.target.files[0];
        const reader = new FileReader();
        
        reader.onload = () => {
            this.fileData = {
                fileName: file.name,
                base64Data: reader.result.split(',')[1]
            };
            this.handleSaveDocument(); 
        };

        reader.readAsDataURL(file);
    }
    
    handleSaveDocument() {
        if (!this.fileData) {
            return;
        }
        uploadFile({ parentId: this.recordId, fileName: this.fileData.fileName, base64Data: this.fileData.base64Data })
            .then(result => {
                this.showSuccessToast('Document uploaded successfully');
                console.log('Document saved successfully:', result);
            })
            .catch(error => {
                this.showToast('Error', error.body.message, 'error');
            });
    }

    showSuccessToast(message) {
        const event = new ShowToastEvent({
            title: 'Success',
            message: message,
            variant: 'success',
        });
        this.dispatchEvent(event);
    }

    handleScan() {
        if (this.barcodeScanner.isAvailable()) {
            let scanningOptions = {
                barcodeTypes: ["code128", "code39", "code93", "ean13", "ean8", "upca", "upce", "qr", "datamatrix", "itf", "pdf417"], 
                instructionText: "Position barcode in the scanner view.\nPress x to stop.",
                successText: "Successful Scan!"
            };
            this.barcodeScanner.scan(scanningOptions)
                .then((results) => {
                    this.itemCode = results.value;
                    this.isItemCodeDisabled = true;
                })
                .catch((error) => {
                    this.showToast('Error', error.body.message, 'error');
                })
                .finally(() => {
                    this.barcodeScanner.dismiss();
                });
        } else {
            this.showToast('Error', 'Barcode scanner is not available', 'error');
        }
    }

    handleCallout() {
        if (!this.itemCode) {
            this.showToast('Warning', 'Please enter a value in the input field.', 'warning');
            return;
        }

        isSerialIdLinked({ serialId: this.itemCode })
            .then(result => {
                this.isSerialIdLinkedResult = result.isLinked;
                this.previousAssetId = result.recordId;
                this.previousAccount = result.AccountId;
                if (result.isLinked) {
                    this.showToast('Warning', 'The scanned serial ID is already linked with an existing asset.', 'warning');
                } else {
                    this.makeCallout();
                }
            })
            .catch(error => {
                this.showToast('Error', error.body.message, 'error');
            });
    }

    handleTransferClick() {
        transferAsset({ recordID: this.recordId, previousAssetId: this.previousAssetId, accountId: this.previousAccount }).then(result => {
            this.showToast('Success', result, 'success');
        }).catch(error => {
            this.showToast('Error', error.body.message, 'error');
        });
    }

    makeCallout() {
        makeMockApiCall({ qrCodes: [this.itemCode], recordId: this.recordId })
            .then(result => {
                const parsedResult = JSON.parse(result);
                if (parsedResult && parsedResult.LstProductDetailsApiList && parsedResult.LstProductDetailsApiList.length > 0) {
                    const qrCodeResponse = parsedResult.LstProductDetailsApiList[0]; // Assuming only one response
                    if (qrCodeResponse.Status === 'INVALID') {
                        this.showToast('Error', qrCodeResponse.ResponseMessage, 'error');
                    } else {
                        this.showToast('Success', 'QR Code processed successfully', 'success');
                    }
                } else {
                    this.showToast('Error', 'No product details found in the response', 'error');
                }
            })
            .catch(error => {
                this.showToast('Error', error.body.message, 'error');
            });
    }

    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        });
        this.dispatchEvent(event);
    }
}
