<template>
    <lightning-card title="Issue Form" icon-name="utility:record">
        <div>
            <lightning-input label="Issue" value={issue} onchange={handleIssueChange}></lightning-input>
            <lightning-record-picker 
                label="Part Code" 
                object-api-name="Product2" 
                field-name="Name" 
                record-id={partCodeId} 
                onchange={handlePartCodeChange}>
            </lightning-record-picker>
            <lightning-input label="Model Number" value={modelNumber} onchange={handleModelNumberChange}></lightning-input>
            <lightning-input label="Reason for Replacement" value={reasonForReplacement} onchange={handleReasonChange}></lightning-input>
            <lightning-input label="Quantity" type="number" value={quantity} onchange={handleQuantityChange}></lightning-input>
            <lightning-combobox label="Address of Material Delivery" options={deliveryOptions} value={selectedDeliveryOption} onchange={handleDeliveryChange}></lightning-combobox>
            
            <lightning-file-upload label="Upload Photo with Serial Number" name="serialNumberFile" accept=".png,.jpg,.jpeg" record-id={recordId} onuploadfinished={handleUploadFinished}></lightning-file-upload>
            <lightning-file-upload label="Customer Invoice Photograph" name="invoiceFile" accept=".png,.jpg,.jpeg" record-id={recordId} onuploadfinished={handleUploadFinished}></lightning-file-upload>

            <lightning-button label="Save" variant="brand" onclick={handleSave}></lightning-button>
        </div>
    </lightning-card>
</template>


import { LightningElement, track, api } from 'lwc';
import saveFormData from '@salesforce/apex/RequestSparesController.saveFormData';
import uploadFile from '@salesforce/apex/RequestSparesController.uploadFile';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class RequestSpares extends LightningElement {
    @track issue;
    @track partCodeId;
    @track modelNumber;
    @track reasonForReplacement;
    @track quantity;
    @track selectedDeliveryOption;
    @api recordId;
    uploadedFiles = [];

    deliveryOptions = [
        { label: 'ASP', value: 'ASP' },
        { label: 'Customer', value: 'Customer' }
    ];

    handleIssueChange(event) {
        this.issue = event.target.value;
    }

    handlePartCodeChange(event) {
        this.partCodeId = event.detail.value[0]; // Use a safe method to access the selected product ID
    }

    handleModelNumberChange(event) {
        this.modelNumber = event.target.value;
    }

    handleReasonChange(event) {
        this.reasonForReplacement = event.target.value;
    }

    handleQuantityChange(event) {
        this.quantity = event.target.value;
    }

    handleDeliveryChange(event) {
        this.selectedDeliveryOption = event.detail.value;
    }

    handleUploadFinished(event) {
        const uploadedFiles = event.detail.files;
        uploadedFiles.forEach(file => {
            this.uploadedFiles.push({
                name: file.name,
                documentId: file.documentId
            });
        });
    }

    handleSave() {
        if (!this.issue || !this.partCodeId || !this.modelNumber || !this.reasonForReplacement || !this.quantity || !this.selectedDeliveryOption) {
            this.showToast('Error', 'Please fill in all required fields.', 'error');
            return;
        }

        const requestedItems = [{
            productId: this.partCodeId,
            quantity: this.quantity
        }];

        const formData = {
            issue: this.issue,
            modelNumber: this.modelNumber,
            reasonForReplacement: this.reasonForReplacement,
            selectedDeliveryOption: this.selectedDeliveryOption,
            recordId: this.recordId,
            requestedItems: requestedItems
        };

        saveFormData({ formData })
            .then(result => {
                const productRequestId = result;

                // Upload files and associate them with ProductRequestLineItems
                const uploadPromises = this.uploadedFiles.map(file => {
                    return uploadFile({
                        parentId: productRequestId,
                        fileName: file.name,
                        base64Data: file.base64,
                        contentType: file.contentType
                    });
                });

                Promise.all(uploadPromises)
                    .then(() => {
                        this.showToast('Success', 'Form data and files saved successfully.', 'success');
                        this.clearForm();
                    })
                    .catch(error => {
                        this.showToast('Error', 'Error uploading files: ' + error.body.message, 'error');
                    });
            })
            .catch(error => {
                this.showToast('Error', 'Error saving form data: ' + error.body.message, 'error');
            });
    }

    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        });
        this.dispatchEvent(event);
    }

    clearForm() {
        this.issue = '';
        this.partCodeId = '';
        this.modelNumber = '';
        this.reasonForReplacement = '';
        this.quantity = '';
        this.selectedDeliveryOption = '';
        this.uploadedFiles = [];
    }
}
